Initialization of Variables
In C++, there are three ways to initialize variables. They are all equivalent and are reminiscent of the evolution of the language over the years:

1. c-like initialization  (because it is inherited from the C language)
type identifier = initial_value;
For example, to declare a variable of type int called x and initialize it to a value of zero from the same moment it is declared, we can write:
int x = 0;

2. constructor initialization  (introduced by the C++ language)
type identifier (initial_value);
For example:
int x (0);

3. uniform initialization ( introduced by the revision of the C++ standard, in 2011):
type identifier {initial_value};
For example:
int x {0};



Type deduction: auto and decltype
auto and decltype are powerful features recently added to the language. But the type deduction
features they introduce are meant to be used either when the type cannot be obtained by other means or when using it improves code readability.

int foo = 0;
auto bar = foo;  // the same as: int bar = foo;

int foo = 0;
decltype(foo) bar;  // the same as: int bar;
